{"version":3,"sources":["Common/images/logo.svg","Components/TableView.js","Components/PowerPlantList.js","Components/Header.js","Components/Footer.js","serviceWorker.js","index.js"],"names":["module","exports","TableView","data","map","row","i","key","className","bundesnetzagentur_number","comapny_name","type","state","production_value_kw","aggregated_production_kw","PowerPlantList","props","filter","productionValue","currentPage","todosPerPage","_loadData","bind","handleClick","this","setInterval","e","setState","target","value","axios","get","then","response","console","log","event","Number","id","getData","dt","indexOfLastTodo","indexOfFirstTodo","renderTodos","slice","index","pageNumbers","Math","ceil","length","push","renderPageNumbers","number","onClick","sort","a","b","onChange","filterType","filterProductionValue","Component","Header","href","src","logo","alt","basename","exact","path","Footer","Boolean","window","location","hostname","match","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbb73c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.59ff3083.svg\";","import React from \"react\";\n\n \n\nconst TableView = ({ data }) => {\n    return (\n      <div>\n          <table>\n        <thead>\n          <tr>\n              <th>S.No</th>\n              <th>Bundesnetza gentur Number</th>\n              <th>Company</th>\n              <th>Type</th>\n              <th>State</th>\n              <th>Production Value (kW)</th>\n              <th>Agg.Production (kW)</th>\n          </tr>\n        </thead>\n        <tbody>\n        {data.map((row, i)=>(\n          \n          <tr key={i} className={ i%2 ==0? 'white-bg' : 'gray-bg'}>  \n            <td>{i+1}</td>\n            <td>{row.bundesnetzagentur_number}</td>\n            <td>{row.comapny_name}</td>\n            <td>{row.type}</td>\n            <td>{row.state}</td>\n            <td>{row.production_value_kw}</td>\n            <td>{row.aggregated_production_kw}</td>\n          </tr>\n          ))} \n        \n        </tbody>\n      </table>  \n      </div>\n    );\n  };\n  \n  export default TableView;\n  ","import React, { Component } from 'react'\nimport axios from 'axios';\nimport TableView from './TableView';\n const URL_PATH = 'https://reactdemoapi.herokuapp.com/power-plants';\n//const URL_PATH = 'http://localhost:8081/power-plants';\n \n \n    /**\n     * @public\n     * @class\n     * PowerPlantList to get json object and displayed it.\n     */\nexport default class PowerPlantList extends Component {\n    /**\n     * @public\n     * @function\n     * It can be used to bind event handlers to the component and/or initializing the local state of the component\n     * data [] - initializing json values in array\n     * filter - filter type\n     * productionValue - sorting max or min values\n     */\n    constructor(props){\n        super(props)\n        this.state = {\n          data: [],\n          filter:\"\",\n          productionValue:\"\",\n          currentPage: 1,\n          todosPerPage: 10\n        }\n        this._loadData = this._loadData.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        \n      }\n    /**\n     * @function\n     * this function for load data \n     * setInterval  -   data  will updating every 10 seconds\n     */\n\n     componentWillMount(){\n        this._loadData() // first time loading the data\n        setInterval(()=> this._loadData(), 10000) // data will after 10 seconds\n       \n     }\n     /**\n       * @function\n       * this function for set state value for filter type\n       * filter  -   set state value WIND_ONSHORE | WIND_OFFSHORE | HYDRO | BIOMASS\n       */\n\n     filterType(e){\n        this.setState({filter: e.target.value})\n      }\n\n      /**\n       * @function\n       * this function for sorting to set state Descending & Acending\n       * filter  -   set state value desc & asc\n       */\n     \n      filterProductionValue(e){\n        this.setState({productionValue: e.target.value})\n      }\n\n      /**\n       * @function\n       * this function for fetching data from json url\n       * data  -   response data store to data variable\n       */\n\n     _loadData() {\n        const {   data } = this.state;\n        axios.get(URL_PATH).then(response => {\n         console.log(response); \n          this.setState({\n            data: response.data,\n            \n          });\n          \n        });\n      }\n\n      handleClick(event) {\n        this.setState({\n          currentPage: Number(event.target.id)\n        });\n      }\n\n      \n\n      \n\n    render() {\n      // filter type\n       /**\n       * filer the data when we change the drop down \n       */\n      let getData;\n      if(this.state.filter !='') {\n        getData = this.state.data.filter(\n        (dt) =>{\n          console.log(dt.type)\n          return dt.type === this.state.filter;\n        }\n      );\n      } else {\n         getData =  this.state.data;\n      }\n\n      const {  data,currentPage, todosPerPage } = this.state;\n      const indexOfLastTodo = currentPage * todosPerPage;\n      const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n      const currentTodos = getData.slice(indexOfFirstTodo, indexOfLastTodo);\n\n      const renderTodos = currentTodos.map((data, index) => {\n        \n        return data;\n      });\n\n      const pageNumbers = [];\n      for (let i = 1; i <= Math.ceil(data.length / todosPerPage); i++) {\n        pageNumbers.push(i);\n      }\n\n      const renderPageNumbers = pageNumbers.map(number => {\n        return (\n          <li\n            key={number}\n            id={number}\n            onClick={this.handleClick}\n          >\n            {number}\n          </li>\n        );\n      });\n\n    \n\n\n\n      //  productionValue sorting\n      if(this.state.productionValue){\n        console.log(this.state.productionValue)\n        if(this.state.productionValue == 'desc'){\n            getData.sort((a, b) => b.production_value_kw - a.production_value_kw);\n        } else if(this.state.productionValue == 'asc'){\n            getData.sort((a, b) => a.production_value_kw - b.production_value_kw);    \n        } \n    } \n      \n       \n        return (\n            \n          <div className=\"container\"> \n            <h3>Power Plants</h3>\n            <div className=\"row\">\n              {/* drop down for type */}\n                  <div className=\"col m4 s4 center-align\">\n                      <label>Filter</label>\n                      <select onChange={this.filterType.bind(this)} value={this.state.filterType} className=\"browser-default\">\n                          <option value=\"\">Select Type</option>\n                          <option value=\"WIND_ONSHORE\">On Shore</option>\n                          <option value=\"WIND_OFFSHORE\">Off Shore</option>\n                          <option value=\"HYDRO\">Hydro</option>\n                          <option value=\"BIOMASS\">BIOMASS</option>\n                      </select>\n                  </div>\n                  {/* drop down value Production Value */}\n                  <div className=\"col m4 s4 center-align\">\n                  <label>Production Value (Max or Min)</label>\n                      <select onChange={this.filterProductionValue.bind(this)} value={this.state.filterProductionValue} className=\"browser-default\">\n                          <option value=\"\">Select Production Value</option>\n                          <option value=\"desc\">Production Value Max</option>\n                          <option value=\"asc\">Production Value Min</option>\n                      </select>\n                   </div>\n              </div> \n           {/* Table */}\n          <TableView data={renderTodos}  /> \n           <ul id=\"page-numbers\">\n              {renderPageNumbers}\n           </ul>\n            </div>\n        )\n    }\n}\n","// Author: Asick Ahamed\nimport React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport PowerPlantList from \"./PowerPlantList\"\nimport logo from '../Common/images/logo.svg' \n\n\n\nclass Header extends Component {\n  \n\n  \n  render() {\n\n    \n \n    return (\n     \n      <Router>\n      <header>\n      <div className=\"navbar-fixed\">\n      <nav>\n      <div className=\"nav-wrapper container\">\n        <a href=\"#\" className=\"brand-logo\"><img src={logo} alt={\"logo\"}/> </a>\n       \n      </div>\n    </nav>\n    </div>\n        </header> \n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Router basename={'/'}>\n            <Route exact path=\"/\">\n               <PowerPlantList />\n            </Route>\n          </Router>\n        </Switch>\n    </Router>\n    \n    );\n  }\n}\n\nexport default Header;\n\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer className=\"page-footer\">\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col l8 s12\">\n          <h5 className=\"white-text\">Resonanz</h5>\n          <p className=\"grey-text text-lighten-4\">\n          Our purpose is to build a state-of-the-art software platform to enable and economically incentivize producers and consumers of electricity to go 100% renewable. Our aim is to empower renewables through cutting-edge and highly customer-centered technology. We are currently developing our P³ platform in close cooperation with our trusted partners and will update this space in the coming months.\n          </p>\n        </div>\n        <div className=\"col l4  s12\">\n          <h5 className=\"white-text\">Links</h5>\n          <ul>\n            <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Home</a></li>\n            <li><a className=\"grey-text text-lighten-3\" href=\"#!\">About Us</a></li>\n            <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Career</a></li>\n            <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Services</a></li>\n            <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Contact Us</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div className=\"footer-copyright\">\n      <div className=\"container\">\n      © 2019 Copyright www.Resonanz.io\n      </div>\n    </div>\n  </footer>\n  );\n}\n\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport './Common/Style.scss';  \n\nimport * as serviceWorker from './serviceWorker';\nfunction App() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Footer/>\n      </div>\n    );\n  }\n  \n  export default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}