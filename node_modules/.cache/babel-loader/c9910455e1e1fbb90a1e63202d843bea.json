{"ast":null,"code":"var _jsxFileName = \"/Users/asick/projects/task/resonanz/frontend/src/Components/PowerPlantList.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport TableView from './TableView';\nconst URL_PATH = 'https://reactdemoapi.herokuapp.com/power-plants'; //const URL_PATH = 'http://localhost:8081/power-plants';\n\n/**\n * @public\n * @class\n * PowerPlantList to get json object and displayed it.\n */\n\nexport default class PowerPlantList extends Component {\n  /**\n   * @public\n   * @function\n   * It can be used to bind event handlers to the component and/or initializing the local state of the component\n   * data [] - initializing json values in array\n   * filter - filter type\n   * productionValue - sorting max or min values\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      filter: \"\",\n      productionValue: \"\",\n      currentPage: 1,\n      todosPerPage: 10\n    };\n    this._loadData = this._loadData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  /**\n   * @function\n   * this function for load data \n   * setInterval  -   data  will updating every 10 seconds\n   */\n\n\n  componentWillMount() {\n    this._loadData(); // first time loading the data\n\n\n    setInterval(() => this._loadData(), 10000); // data will after 10 seconds\n  }\n  /**\n    * @function\n    * this function for set state value for filter type\n    * filter  -   set state value WIND_ONSHORE | WIND_OFFSHORE | HYDRO | BIOMASS\n    */\n\n\n  filterType(e) {\n    this.setState({\n      filter: e.target.value\n    });\n  }\n  /**\n   * @function\n   * this function for sorting to set state Descending & Acending\n   * filter  -   set state value desc & asc\n   */\n\n\n  filterProductionValue(e) {\n    this.setState({\n      productionValue: e.target.value\n    });\n  }\n  /**\n   * @function\n   * this function for fetching data from json url\n   * data  -   response data store to data variable\n   */\n\n\n  _loadData() {\n    const data = this.state.data;\n    axios.get(URL_PATH).then(response => {\n      console.log(response);\n      this.setState({\n        data: response.data\n      });\n    });\n  }\n\n  handleClick(event) {\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  }\n\n  render() {\n    // filter type\n\n    /**\n    * filer the data when we change the drop down \n    */\n    let getData;\n\n    if (this.state.filter != '') {\n      getData = this.state.data.filter(dt => {\n        console.log(dt.type);\n        return dt.type === this.state.filter;\n      });\n    } else {\n      getData = this.state.data;\n    } //  productionValue sorting\n\n\n    if (this.state.productionValue) {\n      console.log(this.state.productionValue);\n\n      if (this.state.productionValue == 'desc') {\n        getData.sort((a, b) => b.production_value_kw - a.production_value_kw);\n      } else if (this.state.productionValue == 'asc') {\n        getData.sort((a, b) => a.production_value_kw - b.production_value_kw);\n      }\n    }\n\n    const _this$state = this.state,\n          data = _this$state.data,\n          currentPage = _this$state.currentPage,\n          todosPerPage = _this$state.todosPerPage;\n    const indexOfLastTodo = currentPage * todosPerPage;\n    const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n    const currentTodos = getData.slice(indexOfFirstTodo, indexOfLastTodo);\n    const renderTodos = currentTodos.map((data, index) => {\n      return data;\n    });\n    const pageNumbers = [];\n    const pageLength = getData.length;\n\n    for (let i = 1; i <= Math.ceil(pageLength / todosPerPage); i++) {\n      console.log(pageNumbers);\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return React.createElement(\"li\", {\n        key: number,\n        id: number,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, number);\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Power Plants\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col m4 s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Filter\"), React.createElement(\"select\", {\n      onChange: this.filterType.bind(this),\n      value: this.state.filterType,\n      className: \"browser-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Select Type\"), React.createElement(\"option\", {\n      value: \"WIND_ONSHORE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"On Shore\"), React.createElement(\"option\", {\n      value: \"WIND_OFFSHORE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Off Shore\"), React.createElement(\"option\", {\n      value: \"HYDRO\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Hydro\"), React.createElement(\"option\", {\n      value: \"BIOMASS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"BIOMASS\"))), React.createElement(\"div\", {\n      className: \"col m4 s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Production Value (Max or Min)\"), React.createElement(\"select\", {\n      onChange: this.filterProductionValue.bind(this),\n      value: this.state.filterProductionValue,\n      className: \"browser-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Select Production Value\"), React.createElement(\"option\", {\n      value: \"desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Production Value Max\"), React.createElement(\"option\", {\n      value: \"asc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Production Value Min\")))), React.createElement(TableView, {\n      data: renderTodos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      id: \"page-numbers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, renderPageNumbers));\n  }\n\n}","map":{"version":3,"sources":["/Users/asick/projects/task/resonanz/frontend/src/Components/PowerPlantList.js"],"names":["React","Component","axios","TableView","URL_PATH","PowerPlantList","constructor","props","state","data","filter","productionValue","currentPage","todosPerPage","_loadData","bind","handleClick","componentWillMount","setInterval","filterType","e","setState","target","value","filterProductionValue","get","then","response","console","log","event","Number","id","render","getData","dt","type","sort","a","b","production_value_kw","indexOfLastTodo","indexOfFirstTodo","currentTodos","slice","renderTodos","map","index","pageNumbers","pageLength","length","i","Math","ceil","push","renderPageNumbers","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport TableView from './TableView';\n const URL_PATH = 'https://reactdemoapi.herokuapp.com/power-plants';\n//const URL_PATH = 'http://localhost:8081/power-plants';\n \n \n    /**\n     * @public\n     * @class\n     * PowerPlantList to get json object and displayed it.\n     */\nexport default class PowerPlantList extends Component {\n    /**\n     * @public\n     * @function\n     * It can be used to bind event handlers to the component and/or initializing the local state of the component\n     * data [] - initializing json values in array\n     * filter - filter type\n     * productionValue - sorting max or min values\n     */\n    constructor(props){\n        super(props)\n        this.state = {\n          data: [],\n          filter:\"\",\n          productionValue:\"\",\n          currentPage: 1,\n          todosPerPage: 10\n        }\n        this._loadData = this._loadData.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        \n      }\n    /**\n     * @function\n     * this function for load data \n     * setInterval  -   data  will updating every 10 seconds\n     */\n\n     componentWillMount(){\n        this._loadData() // first time loading the data\n        setInterval(()=> this._loadData(), 10000) // data will after 10 seconds\n       \n     }\n     /**\n       * @function\n       * this function for set state value for filter type\n       * filter  -   set state value WIND_ONSHORE | WIND_OFFSHORE | HYDRO | BIOMASS\n       */\n\n     filterType(e){\n        this.setState({filter: e.target.value})\n      }\n\n      /**\n       * @function\n       * this function for sorting to set state Descending & Acending\n       * filter  -   set state value desc & asc\n       */\n     \n      filterProductionValue(e){\n        this.setState({productionValue: e.target.value})\n      }\n\n      /**\n       * @function\n       * this function for fetching data from json url\n       * data  -   response data store to data variable\n       */\n\n     _loadData() {\n        const {   data } = this.state;\n        axios.get(URL_PATH).then(response => {\n         console.log(response); \n          this.setState({\n            data: response.data,\n            \n          });\n          \n        });\n      }\n\n      handleClick(event) {\n        this.setState({\n          currentPage: Number(event.target.id)\n        });\n      }\n\n      \n\n      \n\n    render() {\n      // filter type\n       /**\n       * filer the data when we change the drop down \n       */\n      let getData;\n      if(this.state.filter !='') {\n        getData = this.state.data.filter(\n        (dt) =>{\n          console.log(dt.type)\n          return dt.type === this.state.filter;\n        }\n      );\n      } else {\n         getData =  this.state.data;\n      }\n\n       //  productionValue sorting\n       if(this.state.productionValue){\n        console.log(this.state.productionValue)\n        if(this.state.productionValue == 'desc'){\n            getData.sort((a, b) => b.production_value_kw - a.production_value_kw);\n        } else if(this.state.productionValue == 'asc'){\n            getData.sort((a, b) => a.production_value_kw - b.production_value_kw);    \n        } \n    } \n\n      const {  data,currentPage, todosPerPage } = this.state;\n      const indexOfLastTodo = currentPage * todosPerPage;\n      const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n      const currentTodos = getData.slice(indexOfFirstTodo, indexOfLastTodo);\n\n      const renderTodos = currentTodos.map((data, index) => {\n        \n        return data;\n      });\n       \n      const pageNumbers = [];\n      const pageLength = getData.length;\n      for (let i = 1; i <= Math.ceil(pageLength / todosPerPage); i++) {\n        console.log(pageNumbers);\n        pageNumbers.push(i);\n      }\n\n      const renderPageNumbers = pageNumbers.map(number => {\n        return (\n          <li\n            key={number}\n            id={number}\n            onClick={this.handleClick}\n          >\n            {number}\n          </li>\n        );\n      });\n\n    \n\n\n\n     \n      \n       \n        return (\n            \n          <div className=\"container\"> \n            <h3>Power Plants</h3>\n            <div className=\"row\">\n              {/* drop down for type */}\n                  <div className=\"col m4 s4 center-align\">\n                      <label>Filter</label>\n                      <select onChange={this.filterType.bind(this)} value={this.state.filterType} className=\"browser-default\">\n                          <option value=\"\">Select Type</option>\n                          <option value=\"WIND_ONSHORE\">On Shore</option>\n                          <option value=\"WIND_OFFSHORE\">Off Shore</option>\n                          <option value=\"HYDRO\">Hydro</option>\n                          <option value=\"BIOMASS\">BIOMASS</option>\n                      </select>\n                  </div>\n                  {/* drop down value Production Value */}\n                  <div className=\"col m4 s4 center-align\">\n                  <label>Production Value (Max or Min)</label>\n                      <select onChange={this.filterProductionValue.bind(this)} value={this.state.filterProductionValue} className=\"browser-default\">\n                          <option value=\"\">Select Production Value</option>\n                          <option value=\"desc\">Production Value Max</option>\n                          <option value=\"asc\">Production Value Min</option>\n                      </select>\n                   </div>\n              </div> \n           {/* Table */}\n          <TableView data={renderTodos}  /> \n           <ul id=\"page-numbers\">\n              {renderPageNumbers}\n           </ul>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}