{"ast":null,"code":"var _jsxFileName = \"/Users/asick/projects/task/resonanz/frontend/src/Components/RatingList.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ReadMoreReact from 'read-more-react';\nimport Rating from '@material-ui/lab/Rating';\nimport Button from '@material-ui/core/Button';\nimport FlashMessage from 'react-flash-message'; // image path \n\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2/';\nconst URL_PATH = 'https://react-api-demo123.herokuapp.com/api/'; //const URL_PATH = 'http://localhost:9000/api/';  // local url\n// view more content\n\nconst minimumLength = 50;\nconst idealLength = 100;\nconst maxLength = 200;\n/**\n * @public\n * @class\n * RatingList to store the movies data like us movie title, movie rating, movie poster and overview.\n */\n\nexport default class RatingList extends Component {\n  /**\n   * @public\n   * @function\n   * It can be used to bind event handlers to the component and/or initializing the local state of the component\n   * movies [] - initializing movie values in array\n   * filer - sorting\n   * alert - message for after the add review \n   * isActive - variable for random button & stop button\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleNameInput = e => {\n      const rating_star = e.target.value;\n      const movie_id = e.target.name.split(\"-\").pop();\n      axios.put(URL_PATH + \"send\", {\n        id: movie_id,\n        rating: rating_star\n      }).then(response => {\n        this._refreshMovies();\n\n        this.setState({\n          alert: true\n        }, () => {\n          setTimeout(() => {\n            this.setState({\n              alert: false\n            });\n          }, 2000);\n        });\n      });\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.stopbutton = this.stopbutton.bind(this);\n    this.state = {\n      movies: [],\n      filter: \"\",\n      alert: false,\n      isActive: false\n    };\n  }\n\n  componentWillMount() {\n    this._refreshMovies();\n  }\n\n  _refreshMovies() {\n    axios.get(URL_PATH + \"all\").then(response => {\n      this.setState({\n        movies: response.data\n      });\n    });\n  }\n  /**\n   * @function\n   * this function for sorting to set state Descending & Acending\n   * filter  -   set state value desc & asc\n   */\n\n\n  filterChamp(e) {\n    this.setState({\n      filter: e.target.value\n    });\n  }\n  /**\n   * @function\n   * this function will trigger when we click the star icon\n   * rating_star  -  number of rating star ( 1 to 5 )\n   * movie_id -  get id from star icon and remove the string to int\n   * alert -  message for success to setState to true\n   */\n\n\n  /**\n  * @function\n  * this function will trigger when we click the random button\n  * rating_star  -  number of rating star ( 1 to 5 )\n  * movie_id -  get id from star icon and remove the string to int\n  * alert -  message for success to setState to true\n  */\n  async getMovies() {\n    axios.get(URL_PATH + \"rand\").then(response => {\n      this.setState({\n        movies: response.data\n      });\n    });\n  }\n  /**\n  * @function\n  * this function will trigger when we click the stop button\n  * isActive  -  random button will false\n  * clearInterval -  remove the random data \n  */\n\n\n  stopbutton() {\n    this.setState({\n      isActive: false\n    }, () => {\n      clearInterval(this.randomData);\n    });\n  }\n  /**\n  * @function\n  * this function will trigger when we click the Random Rating button\n  * isActive  -  random button will True\n  * setInterval -  random data will run automatically when we click the Random Rating button\n  */\n\n\n  handleClick() {\n    this.setState({\n      isActive: true\n    }, () => {\n      this.randomData = setInterval(() => this.getMovies(), 1000);\n    });\n  }\n\n  render() {\n    /** isButtonClick : True & Flase\n     * Button Random Rating & Stop Button will shown\n     * isActive  -   random button will True or False\n     * handleClick - function trigger to random data\n     * stopbutton  - function for stop the randdom data \n     */\n    const isButtonClick = this.state.isActive;\n    let button;\n\n    if (isButtonClick) {\n      button = React.createElement(Button, {\n        className: \"button-stop\",\n        onClick: this.stopbutton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Stop\");\n    } else {\n      button = React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"material-icons play_arrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), \"Random Rating\");\n    }\n\n    function SuccessAlert(props) {\n      if (!props.alert) {\n        return null;\n      }\n\n      return React.createElement(FlashMessage, {\n        duration: 2500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Your rating has been saved !\")));\n    }\n\n    const getData = this.state.movies; // sorting lowest rating & highest \n\n    if (this.state.filter) {\n      if (this.state.filter == 'desc') {\n        getData.sort((a, b) => b.rating - a.rating);\n      } else if (this.state.filter == 'asc') {\n        getData.sort((a, b) => a.rating - b.rating);\n      } else if (this.state.filter == '0') {\n        getData.sort((a, b) => a.id - b.id);\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container movielist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Movie List\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.state.alert ? React.createElement(SuccessAlert, {\n      alert: this.state.alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }) : null), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col m4 s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Sort By\"), React.createElement(\"select\", {\n      onChange: this.filterChamp.bind(this),\n      value: this.state.filterChamp,\n      className: \"browser-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Select\"), React.createElement(\"option\", {\n      value: \"desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Rating Descending\"), React.createElement(\"option\", {\n      value: \"asc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Rating Ascending\"))), React.createElement(\"div\", {\n      className: \"col s5 random-rating-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, button)), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, getData.map((row, i) => React.createElement(\"div\", {\n      className: \"col s12 m6 l6 card horizontal box\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: IMG_PATH + row.poster_path,\n      alt: row.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-stacked\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, row.title), React.createElement(ReadMoreReact, {\n      text: row.overview,\n      min: minimumLength,\n      ideal: idealLength,\n      max: maxLength,\n      readMoreText: \"Read more...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"card-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Rating, {\n      name: \"movie-id-\" + row.id,\n      value: row.rating,\n      max: 5,\n      onChange: this.handleNameInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/asick/projects/task/resonanz/frontend/src/Components/RatingList.js"],"names":["React","Component","axios","ReadMoreReact","Rating","Button","FlashMessage","IMG_PATH","URL_PATH","minimumLength","idealLength","maxLength","RatingList","constructor","props","handleNameInput","e","rating_star","target","value","movie_id","name","split","pop","put","id","rating","then","response","_refreshMovies","setState","alert","setTimeout","handleClick","bind","stopbutton","state","movies","filter","isActive","componentWillMount","get","data","filterChamp","getMovies","clearInterval","randomData","setInterval","render","isButtonClick","button","SuccessAlert","getData","sort","a","b","map","row","i","poster_path","title","overview"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport ReadMoreReact from 'read-more-react';\nimport Rating from '@material-ui/lab/Rating';\nimport Button from '@material-ui/core/Button';\nimport FlashMessage from 'react-flash-message'\n// image path \nconst IMG_PATH = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2/';\nconst URL_PATH = 'https://react-api-demo123.herokuapp.com/api/';\n//const URL_PATH = 'http://localhost:9000/api/';  // local url\n\n// view more content\nconst minimumLength = 50\nconst idealLength = 100\nconst maxLength = 200\n \n/**\n * @public\n * @class\n * RatingList to store the movies data like us movie title, movie rating, movie poster and overview.\n */\nexport default class RatingList extends Component {\n   \n/**\n * @public\n * @function\n * It can be used to bind event handlers to the component and/or initializing the local state of the component\n * movies [] - initializing movie values in array\n * filer - sorting\n * alert - message for after the add review \n * isActive - variable for random button & stop button\n */\n    \n    constructor(props){\n        super(props)\n        this.handleClick = this.handleClick.bind(this);\n        this.stopbutton = this.stopbutton.bind(this);\n        this.state = {\n          movies: [],\n          filter:\"\",\n          alert:false,\n          isActive:false,\n        }\n\n      }\n\n       componentWillMount(){\n         this._refreshMovies();   \n      }\n\n      _refreshMovies() {\n        axios.get(URL_PATH+\"all\").then(response => {\n          this.setState({\n            movies: response.data\n          });\n        });\n      }\n      /**\n       * @function\n       * this function for sorting to set state Descending & Acending\n       * filter  -   set state value desc & asc\n       */\n      filterChamp(e){\n        this.setState({filter: e.target.value})\n      }\n\n      /**\n       * @function\n       * this function will trigger when we click the star icon\n       * rating_star  -  number of rating star ( 1 to 5 )\n       * movie_id -  get id from star icon and remove the string to int\n       * alert -  message for success to setState to true\n       */\n      handleNameInput = e => {\n        const rating_star =  e.target.value;\n        const movie_id = e.target.name.split(\"-\").pop()\n        axios\n          .put(URL_PATH+\"send\", {\n            id:movie_id,rating:rating_star\n          })\n          .then(response => {\n              this._refreshMovies();\n              this.setState({ alert: true}, () => {\n                setTimeout(() => { this.setState({ alert: false }) }, 2000);\n              })\n              \n          });\n       \n      };\n       /**\n       * @function\n       * this function will trigger when we click the random button\n       * rating_star  -  number of rating star ( 1 to 5 )\n       * movie_id -  get id from star icon and remove the string to int\n       * alert -  message for success to setState to true\n       */\n\n      async getMovies(){\n\n        axios.get(URL_PATH+\"rand\").then(response => {\n             \n             this.setState({\n               movies: response.data\n             });\n           \n           });    \n       }\n       /**\n       * @function\n       * this function will trigger when we click the stop button\n       * isActive  -  random button will false\n       * clearInterval -  remove the random data \n       */\n       stopbutton() {\n          \n        this.setState({isActive: false}, () => {\n          clearInterval(this.randomData);\n          \n       });\n      }\n       /**\n       * @function\n       * this function will trigger when we click the Random Rating button\n       * isActive  -  random button will True\n       * setInterval -  random data will run automatically when we click the Random Rating button\n       */\n      handleClick(){\n     \n        this.setState({isActive: true}, () => {\n           \n           this.randomData  = setInterval(()=> this.getMovies(), 1000)\n        });\n                      \n      }\n    \n\n    render() {\n        /** isButtonClick : True & Flase\n         * Button Random Rating & Stop Button will shown\n         * isActive  -   random button will True or False\n         * handleClick - function trigger to random data\n         * stopbutton  - function for stop the randdom data \n         */\n        const isButtonClick = this.state.isActive;\n        let button;\n        if (isButtonClick) {\n          button = <Button className=\"button-stop\" onClick={this.stopbutton} >Stop</Button>;\n        } else {\n          button = <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClick} ><i className=\"material-icons play_arrow\"></i>Random Rating</Button>;\n        }\n\n       \n      \n        function SuccessAlert(props) {\n          if (!props.alert) {\n              return (null);\n          }  \n          return (\n            <FlashMessage duration={2500}>\n            <div className=\"msg\">\n            <strong>Your rating has been saved !</strong>\n            </div>\n            </FlashMessage>\n          );\n        }\n        \n        const  getData =  this.state.movies;\n        // sorting lowest rating & highest \n        if(this.state.filter){\n            if(this.state.filter == 'desc'){\n                getData.sort((a, b) => b.rating - a.rating);\n            } else if(this.state.filter == 'asc'){\n                getData.sort((a, b) => a.rating - b.rating);    \n            } else if(this.state.filter == '0'){\n                getData.sort((a, b) => a.id - b.id);    \n            }\n        } \n        \n        \n         \n        return (\n          \n        <div className=\"container movielist\">\n          <h3>Movie List</h3>\n              <div>\n                {this.state.alert ? <SuccessAlert alert={this.state.alert} /> : null}\n                 \n              </div>\n              <div className=\"row\">\n                  <div className=\"col m4 s4 center-align\">\n                      <label>Sort By</label>\n                      <select onChange={this.filterChamp.bind(this)} value={this.state.filterChamp} className=\"browser-default\">\n                          <option value=\"\">Select</option>\n                          <option value=\"desc\">Rating Descending</option>\n                          <option value=\"asc\">Rating Ascending</option>\n                      </select>\n                  </div>\n                  <div className=\"col s5 random-rating-button\">\n                  {button}\n                  </div>\n              </div> \n              <div className=\"row\">    \n                {getData.map((row, i)=>(\n                    <div className=\"col s12 m6 l6 card horizontal box\" key={i}>\n                          <div className=\"card-image\">  \n                              <img src={IMG_PATH+row.poster_path} alt={row.title}/>\n                          </div> \n                          <div className=\"card-stacked\">  \n                              <h5>{row.title}</h5>\n                              <ReadMoreReact text={row.overview}\n                                  min={minimumLength}\n                                  ideal={idealLength}\n                                  max={maxLength}\n                                  readMoreText=\"Read more...\"/>\n                              <div className=\"card-action\">           \n                              <Rating\n                                  name= { \"movie-id-\" + row.id }  \n                                  value={row.rating}\n                                  max={5}\n                                  onChange={this.handleNameInput}\n                                  />\n                          </div>\n                      </div>\n                    </div>\n                ))} \n              </div>\n            </div>\n            \n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}